# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: c4echain/cfesignature/genesis.proto, c4echain/cfesignature/params.proto, c4echain/cfesignature/query.proto, c4echain/cfesignature/signature.proto, c4echain/cfesignature/tx.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the parameters for the module."""

    pass


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """GenesisState defines the cfesignature module's genesis state."""

    params: "Params" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    """QueryParamsRequest is request type for the Query/Params RPC method."""

    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is response type for the Query/Params RPC method.
    """

    params: "Params" = betterproto.message_field(1)
    """params holds all the parameters of this module."""


@dataclass(eq=False, repr=False)
class QueryCreateReferenceIdRequest(betterproto.Message):
    creator: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryCreateReferenceIdResponse(betterproto.Message):
    reference_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryCreateStorageKeyRequest(betterproto.Message):
    target_acc_address: str = betterproto.string_field(1)
    reference_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryCreateStorageKeyResponse(betterproto.Message):
    storage_key: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryCreateReferencePayloadLinkRequest(betterproto.Message):
    reference_id: str = betterproto.string_field(1)
    payload_hash: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryCreateReferencePayloadLinkResponse(betterproto.Message):
    reference_key: str = betterproto.string_field(1)
    reference_value: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryVerifySignatureRequest(betterproto.Message):
    reference_id: str = betterproto.string_field(1)
    target_acc_address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryVerifySignatureResponse(betterproto.Message):
    signature: str = betterproto.string_field(1)
    algorithm: str = betterproto.string_field(2)
    certificate: str = betterproto.string_field(3)
    timestamp: str = betterproto.string_field(4)
    valid: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class QueryGetAccountInfoRequest(betterproto.Message):
    acc_address_string: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryGetAccountInfoResponse(betterproto.Message):
    acc_address: str = betterproto.string_field(1)
    pub_key: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryVerifyReferencePayloadLinkRequest(betterproto.Message):
    reference_id: str = betterproto.string_field(1)
    payload_hash: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryVerifyReferencePayloadLinkResponse(betterproto.Message):
    is_valid: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class QueryGetReferencePayloadLinkRequest(betterproto.Message):
    reference_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryGetReferencePayloadLinkResponse(betterproto.Message):
    reference_payload_link_value: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class Signature(betterproto.Message):
    signature: str = betterproto.string_field(1)
    algorithm: str = betterproto.string_field(2)
    certificate: str = betterproto.string_field(3)
    timestamp: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class MsgStoreSignature(betterproto.Message):
    creator: str = betterproto.string_field(1)
    storage_key: str = betterproto.string_field(2)
    signature_json: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class MsgStoreSignatureResponse(betterproto.Message):
    tx_id: str = betterproto.string_field(1)
    tx_timestamp: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MsgPublishReferencePayloadLink(betterproto.Message):
    creator: str = betterproto.string_field(1)
    key: str = betterproto.string_field(2)
    value: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class MsgPublishReferencePayloadLinkResponse(betterproto.Message):
    tx_timestamp: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MsgCreateAccount(betterproto.Message):
    creator: str = betterproto.string_field(1)
    acc_address_string: str = betterproto.string_field(2)
    pub_key_string: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class MsgCreateAccountResponse(betterproto.Message):
    account_number: str = betterproto.string_field(1)


class QueryStub(betterproto.ServiceStub):
    async def params(
        self,
        query_params_request: "QueryParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryParamsResponse":
        return await self._unary_unary(
            "/chain4energy.c4echain.cfesignature.Query/Params",
            query_params_request,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_reference_id(
        self,
        query_create_reference_id_request: "QueryCreateReferenceIdRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryCreateReferenceIdResponse":
        return await self._unary_unary(
            "/chain4energy.c4echain.cfesignature.Query/CreateReferenceId",
            query_create_reference_id_request,
            QueryCreateReferenceIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_storage_key(
        self,
        query_create_storage_key_request: "QueryCreateStorageKeyRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryCreateStorageKeyResponse":
        return await self._unary_unary(
            "/chain4energy.c4echain.cfesignature.Query/CreateStorageKey",
            query_create_storage_key_request,
            QueryCreateStorageKeyResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_reference_payload_link(
        self,
        query_create_reference_payload_link_request: "QueryCreateReferencePayloadLinkRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryCreateReferencePayloadLinkResponse":
        return await self._unary_unary(
            "/chain4energy.c4echain.cfesignature.Query/CreateReferencePayloadLink",
            query_create_reference_payload_link_request,
            QueryCreateReferencePayloadLinkResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def verify_signature(
        self,
        query_verify_signature_request: "QueryVerifySignatureRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryVerifySignatureResponse":
        return await self._unary_unary(
            "/chain4energy.c4echain.cfesignature.Query/VerifySignature",
            query_verify_signature_request,
            QueryVerifySignatureResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_account_info(
        self,
        query_get_account_info_request: "QueryGetAccountInfoRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGetAccountInfoResponse":
        return await self._unary_unary(
            "/chain4energy.c4echain.cfesignature.Query/GetAccountInfo",
            query_get_account_info_request,
            QueryGetAccountInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def verify_reference_payload_link(
        self,
        query_verify_reference_payload_link_request: "QueryVerifyReferencePayloadLinkRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryVerifyReferencePayloadLinkResponse":
        return await self._unary_unary(
            "/chain4energy.c4echain.cfesignature.Query/VerifyReferencePayloadLink",
            query_verify_reference_payload_link_request,
            QueryVerifyReferencePayloadLinkResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_reference_payload_link(
        self,
        query_get_reference_payload_link_request: "QueryGetReferencePayloadLinkRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGetReferencePayloadLinkResponse":
        return await self._unary_unary(
            "/chain4energy.c4echain.cfesignature.Query/GetReferencePayloadLink",
            query_get_reference_payload_link_request,
            QueryGetReferencePayloadLinkResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgStub(betterproto.ServiceStub):
    async def store_signature(
        self,
        msg_store_signature: "MsgStoreSignature",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgStoreSignatureResponse":
        return await self._unary_unary(
            "/chain4energy.c4echain.cfesignature.Msg/StoreSignature",
            msg_store_signature,
            MsgStoreSignatureResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def publish_reference_payload_link(
        self,
        msg_publish_reference_payload_link: "MsgPublishReferencePayloadLink",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgPublishReferencePayloadLinkResponse":
        return await self._unary_unary(
            "/chain4energy.c4echain.cfesignature.Msg/PublishReferencePayloadLink",
            msg_publish_reference_payload_link,
            MsgPublishReferencePayloadLinkResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_account(
        self,
        msg_create_account: "MsgCreateAccount",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCreateAccountResponse":
        return await self._unary_unary(
            "/chain4energy.c4echain.cfesignature.Msg/CreateAccount",
            msg_create_account,
            MsgCreateAccountResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryBase(ServiceBase):
    async def params(
        self, query_params_request: "QueryParamsRequest"
    ) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_reference_id(
        self, query_create_reference_id_request: "QueryCreateReferenceIdRequest"
    ) -> "QueryCreateReferenceIdResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_storage_key(
        self, query_create_storage_key_request: "QueryCreateStorageKeyRequest"
    ) -> "QueryCreateStorageKeyResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_reference_payload_link(
        self,
        query_create_reference_payload_link_request: "QueryCreateReferencePayloadLinkRequest",
    ) -> "QueryCreateReferencePayloadLinkResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def verify_signature(
        self, query_verify_signature_request: "QueryVerifySignatureRequest"
    ) -> "QueryVerifySignatureResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_account_info(
        self, query_get_account_info_request: "QueryGetAccountInfoRequest"
    ) -> "QueryGetAccountInfoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def verify_reference_payload_link(
        self,
        query_verify_reference_payload_link_request: "QueryVerifyReferencePayloadLinkRequest",
    ) -> "QueryVerifyReferencePayloadLinkResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_reference_payload_link(
        self,
        query_get_reference_payload_link_request: "QueryGetReferencePayloadLinkRequest",
    ) -> "QueryGetReferencePayloadLinkResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_params(
        self, stream: "grpclib.server.Stream[QueryParamsRequest, QueryParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.params(request)
        await stream.send_message(response)

    async def __rpc_create_reference_id(
        self,
        stream: "grpclib.server.Stream[QueryCreateReferenceIdRequest, QueryCreateReferenceIdResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_reference_id(request)
        await stream.send_message(response)

    async def __rpc_create_storage_key(
        self,
        stream: "grpclib.server.Stream[QueryCreateStorageKeyRequest, QueryCreateStorageKeyResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_storage_key(request)
        await stream.send_message(response)

    async def __rpc_create_reference_payload_link(
        self,
        stream: "grpclib.server.Stream[QueryCreateReferencePayloadLinkRequest, QueryCreateReferencePayloadLinkResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_reference_payload_link(request)
        await stream.send_message(response)

    async def __rpc_verify_signature(
        self,
        stream: "grpclib.server.Stream[QueryVerifySignatureRequest, QueryVerifySignatureResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.verify_signature(request)
        await stream.send_message(response)

    async def __rpc_get_account_info(
        self,
        stream: "grpclib.server.Stream[QueryGetAccountInfoRequest, QueryGetAccountInfoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_account_info(request)
        await stream.send_message(response)

    async def __rpc_verify_reference_payload_link(
        self,
        stream: "grpclib.server.Stream[QueryVerifyReferencePayloadLinkRequest, QueryVerifyReferencePayloadLinkResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.verify_reference_payload_link(request)
        await stream.send_message(response)

    async def __rpc_get_reference_payload_link(
        self,
        stream: "grpclib.server.Stream[QueryGetReferencePayloadLinkRequest, QueryGetReferencePayloadLinkResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_reference_payload_link(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/chain4energy.c4echain.cfesignature.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
            "/chain4energy.c4echain.cfesignature.Query/CreateReferenceId": grpclib.const.Handler(
                self.__rpc_create_reference_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryCreateReferenceIdRequest,
                QueryCreateReferenceIdResponse,
            ),
            "/chain4energy.c4echain.cfesignature.Query/CreateStorageKey": grpclib.const.Handler(
                self.__rpc_create_storage_key,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryCreateStorageKeyRequest,
                QueryCreateStorageKeyResponse,
            ),
            "/chain4energy.c4echain.cfesignature.Query/CreateReferencePayloadLink": grpclib.const.Handler(
                self.__rpc_create_reference_payload_link,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryCreateReferencePayloadLinkRequest,
                QueryCreateReferencePayloadLinkResponse,
            ),
            "/chain4energy.c4echain.cfesignature.Query/VerifySignature": grpclib.const.Handler(
                self.__rpc_verify_signature,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryVerifySignatureRequest,
                QueryVerifySignatureResponse,
            ),
            "/chain4energy.c4echain.cfesignature.Query/GetAccountInfo": grpclib.const.Handler(
                self.__rpc_get_account_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGetAccountInfoRequest,
                QueryGetAccountInfoResponse,
            ),
            "/chain4energy.c4echain.cfesignature.Query/VerifyReferencePayloadLink": grpclib.const.Handler(
                self.__rpc_verify_reference_payload_link,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryVerifyReferencePayloadLinkRequest,
                QueryVerifyReferencePayloadLinkResponse,
            ),
            "/chain4energy.c4echain.cfesignature.Query/GetReferencePayloadLink": grpclib.const.Handler(
                self.__rpc_get_reference_payload_link,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGetReferencePayloadLinkRequest,
                QueryGetReferencePayloadLinkResponse,
            ),
        }


class MsgBase(ServiceBase):
    async def store_signature(
        self, msg_store_signature: "MsgStoreSignature"
    ) -> "MsgStoreSignatureResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def publish_reference_payload_link(
        self, msg_publish_reference_payload_link: "MsgPublishReferencePayloadLink"
    ) -> "MsgPublishReferencePayloadLinkResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_account(
        self, msg_create_account: "MsgCreateAccount"
    ) -> "MsgCreateAccountResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_store_signature(
        self,
        stream: "grpclib.server.Stream[MsgStoreSignature, MsgStoreSignatureResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.store_signature(request)
        await stream.send_message(response)

    async def __rpc_publish_reference_payload_link(
        self,
        stream: "grpclib.server.Stream[MsgPublishReferencePayloadLink, MsgPublishReferencePayloadLinkResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.publish_reference_payload_link(request)
        await stream.send_message(response)

    async def __rpc_create_account(
        self,
        stream: "grpclib.server.Stream[MsgCreateAccount, MsgCreateAccountResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_account(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/chain4energy.c4echain.cfesignature.Msg/StoreSignature": grpclib.const.Handler(
                self.__rpc_store_signature,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgStoreSignature,
                MsgStoreSignatureResponse,
            ),
            "/chain4energy.c4echain.cfesignature.Msg/PublishReferencePayloadLink": grpclib.const.Handler(
                self.__rpc_publish_reference_payload_link,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgPublishReferencePayloadLink,
                MsgPublishReferencePayloadLinkResponse,
            ),
            "/chain4energy.c4echain.cfesignature.Msg/CreateAccount": grpclib.const.Handler(
                self.__rpc_create_account,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCreateAccount,
                MsgCreateAccountResponse,
            ),
        }
