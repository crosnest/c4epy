# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: c4echain/cfevesting/account_vesting_pool.proto, c4echain/cfevesting/event.proto, c4echain/cfevesting/genesis.proto, c4echain/cfevesting/params.proto, c4echain/cfevesting/query.proto, c4echain/cfevesting/tx.proto, c4echain/cfevesting/vesting_account.proto, c4echain/cfevesting/vesting_types.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import (
    datetime,
    timedelta,
)
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ....cosmos.base import v1beta1 as ___cosmos_base_v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class AccountVestingPools(betterproto.Message):
    owner: str = betterproto.string_field(1)
    vesting_pools: List["VestingPool"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class VestingPool(betterproto.Message):
    name: str = betterproto.string_field(1)
    vesting_type: str = betterproto.string_field(2)
    lock_start: datetime = betterproto.message_field(3)
    lock_end: datetime = betterproto.message_field(4)
    initially_locked: str = betterproto.string_field(5)
    withdrawn: str = betterproto.string_field(6)
    sent: str = betterproto.string_field(7)
    genesis_pool: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class NewVestingAccount(betterproto.Message):
    address: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class NewVestingPool(betterproto.Message):
    owner: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    amount: str = betterproto.string_field(3)
    duration: str = betterproto.string_field(4)
    vesting_type: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class NewVestingAccountFromVestingPool(betterproto.Message):
    owner: str = betterproto.string_field(1)
    address: str = betterproto.string_field(2)
    vesting_pool_name: str = betterproto.string_field(3)
    amount: str = betterproto.string_field(4)
    restart_vesting: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class WithdrawAvailable(betterproto.Message):
    owner: str = betterproto.string_field(1)
    vesting_pool_name: str = betterproto.string_field(2)
    amount: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class VestingSplit(betterproto.Message):
    source: str = betterproto.string_field(1)
    destination: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the parameters for the module."""

    denom: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class VestingAccountTrace(betterproto.Message):
    id: int = betterproto.uint64_field(1)
    address: str = betterproto.string_field(2)
    genesis: bool = betterproto.bool_field(3)
    from_genesis_pool: bool = betterproto.bool_field(4)
    from_genesis_account: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """GenesisState defines the cfevesting module's genesis state."""

    params: "Params" = betterproto.message_field(1)
    vesting_types: List["GenesisVestingType"] = betterproto.message_field(2)
    account_vesting_pools: List["AccountVestingPools"] = betterproto.message_field(3)
    vesting_account_traces: List["VestingAccountTrace"] = betterproto.message_field(4)
    vesting_account_trace_count: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class GenesisVestingType(betterproto.Message):
    name: str = betterproto.string_field(1)
    """vesting type name"""

    lockup_period: int = betterproto.int64_field(2)
    """period of locked coins from vesting start"""

    lockup_period_unit: str = betterproto.string_field(3)
    vesting_period: int = betterproto.int64_field(4)
    """period of veesting coins from lockup period end"""

    vesting_period_unit: str = betterproto.string_field(5)
    free: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    """QueryParamsRequest is request type for the Query/Params RPC method."""

    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is response type for the Query/Params RPC method.
    """

    params: "Params" = betterproto.message_field(1)
    """params holds all the parameters of this module."""


@dataclass(eq=False, repr=False)
class QueryVestingTypeRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryVestingTypeResponse(betterproto.Message):
    vesting_types: List["GenesisVestingType"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class QueryVestingPoolsRequest(betterproto.Message):
    owner: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryVestingPoolsResponse(betterproto.Message):
    vesting_pools: List["VestingPoolInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class VestingPoolInfo(betterproto.Message):
    name: str = betterproto.string_field(1)
    vesting_type: str = betterproto.string_field(2)
    lock_start: datetime = betterproto.message_field(3)
    lock_end: datetime = betterproto.message_field(4)
    withdrawable: str = betterproto.string_field(5)
    initially_locked: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(6)
    currently_locked: str = betterproto.string_field(7)
    sent_amount: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class QueryVestingsSummaryRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryVestingsSummaryResponse(betterproto.Message):
    vesting_all_amount: str = betterproto.string_field(1)
    vesting_in_pools_amount: str = betterproto.string_field(2)
    vesting_in_accounts_amount: str = betterproto.string_field(3)
    delegated_vesting_amount: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class QueryGenesisVestingsSummaryRequest(betterproto.Message):
    """this line is used by starport scaffolding # 3"""

    pass


@dataclass(eq=False, repr=False)
class QueryGenesisVestingsSummaryResponse(betterproto.Message):
    vesting_all_amount: str = betterproto.string_field(1)
    vesting_in_pools_amount: str = betterproto.string_field(2)
    vesting_in_accounts_amount: str = betterproto.string_field(3)
    delegated_vesting_amount: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class MsgCreateVestingPool(betterproto.Message):
    owner: str = betterproto.string_field(1)
    name: str = betterproto.string_field(3)
    amount: str = betterproto.string_field(4)
    duration: timedelta = betterproto.message_field(5)
    vesting_type: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class MsgCreateVestingPoolResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgWithdrawAllAvailable(betterproto.Message):
    owner: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MsgWithdrawAllAvailableResponse(betterproto.Message):
    withdrawn: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MsgCreateVestingAccount(betterproto.Message):
    from_address: str = betterproto.string_field(1)
    to_address: str = betterproto.string_field(2)
    amount: List["___cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(3)
    start_time: int = betterproto.int64_field(4)
    end_time: int = betterproto.int64_field(5)


@dataclass(eq=False, repr=False)
class MsgCreateVestingAccountResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgSendToVestingAccount(betterproto.Message):
    owner: str = betterproto.string_field(1)
    to_address: str = betterproto.string_field(2)
    vesting_pool_name: str = betterproto.string_field(3)
    amount: str = betterproto.string_field(4)
    restart_vesting: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class MsgSendToVestingAccountResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgSplitVesting(betterproto.Message):
    from_address: str = betterproto.string_field(1)
    to_address: str = betterproto.string_field(2)
    amount: List["___cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class MsgSplitVestingResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgMoveAvailableVesting(betterproto.Message):
    from_address: str = betterproto.string_field(1)
    to_address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MsgMoveAvailableVestingResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgMoveAvailableVestingByDenoms(betterproto.Message):
    from_address: str = betterproto.string_field(1)
    to_address: str = betterproto.string_field(2)
    denoms: List[str] = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class MsgMoveAvailableVestingByDenomsResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgUpdateDenomParam(betterproto.Message):
    authority: str = betterproto.string_field(1)
    """authority is the address of the governance account."""

    denom: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MsgUpdateDenomParamResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class VestingTypes(betterproto.Message):
    vesting_types: List["VestingType"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class VestingType(betterproto.Message):
    name: str = betterproto.string_field(1)
    """vesting type name"""

    lockup_period: timedelta = betterproto.message_field(2)
    """period of locked coins (minutes) from vesting start"""

    vesting_period: timedelta = betterproto.message_field(3)
    """period of vesting coins (minutes) from lockup period end"""

    free: str = betterproto.string_field(4)
    """the percentage of tokens that are released initially"""


class QueryStub(betterproto.ServiceStub):
    async def params(
        self,
        query_params_request: "QueryParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryParamsResponse":
        return await self._unary_unary(
            "/chain4energy.c4echain.cfevesting.Query/Params",
            query_params_request,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def vesting_type(
        self,
        query_vesting_type_request: "QueryVestingTypeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryVestingTypeResponse":
        return await self._unary_unary(
            "/chain4energy.c4echain.cfevesting.Query/VestingType",
            query_vesting_type_request,
            QueryVestingTypeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def vesting_pools(
        self,
        query_vesting_pools_request: "QueryVestingPoolsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryVestingPoolsResponse":
        return await self._unary_unary(
            "/chain4energy.c4echain.cfevesting.Query/VestingPools",
            query_vesting_pools_request,
            QueryVestingPoolsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def vestings_summary(
        self,
        query_vestings_summary_request: "QueryVestingsSummaryRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryVestingsSummaryResponse":
        return await self._unary_unary(
            "/chain4energy.c4echain.cfevesting.Query/VestingsSummary",
            query_vestings_summary_request,
            QueryVestingsSummaryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def genesis_vestings_summary(
        self,
        query_genesis_vestings_summary_request: "QueryGenesisVestingsSummaryRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGenesisVestingsSummaryResponse":
        return await self._unary_unary(
            "/chain4energy.c4echain.cfevesting.Query/GenesisVestingsSummary",
            query_genesis_vestings_summary_request,
            QueryGenesisVestingsSummaryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgStub(betterproto.ServiceStub):
    async def create_vesting_pool(
        self,
        msg_create_vesting_pool: "MsgCreateVestingPool",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCreateVestingPoolResponse":
        return await self._unary_unary(
            "/chain4energy.c4echain.cfevesting.Msg/CreateVestingPool",
            msg_create_vesting_pool,
            MsgCreateVestingPoolResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def withdraw_all_available(
        self,
        msg_withdraw_all_available: "MsgWithdrawAllAvailable",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgWithdrawAllAvailableResponse":
        return await self._unary_unary(
            "/chain4energy.c4echain.cfevesting.Msg/WithdrawAllAvailable",
            msg_withdraw_all_available,
            MsgWithdrawAllAvailableResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_vesting_account(
        self,
        msg_create_vesting_account: "MsgCreateVestingAccount",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCreateVestingAccountResponse":
        return await self._unary_unary(
            "/chain4energy.c4echain.cfevesting.Msg/CreateVestingAccount",
            msg_create_vesting_account,
            MsgCreateVestingAccountResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def send_to_vesting_account(
        self,
        msg_send_to_vesting_account: "MsgSendToVestingAccount",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgSendToVestingAccountResponse":
        return await self._unary_unary(
            "/chain4energy.c4echain.cfevesting.Msg/SendToVestingAccount",
            msg_send_to_vesting_account,
            MsgSendToVestingAccountResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def split_vesting(
        self,
        msg_split_vesting: "MsgSplitVesting",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgSplitVestingResponse":
        return await self._unary_unary(
            "/chain4energy.c4echain.cfevesting.Msg/SplitVesting",
            msg_split_vesting,
            MsgSplitVestingResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def move_available_vesting(
        self,
        msg_move_available_vesting: "MsgMoveAvailableVesting",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgMoveAvailableVestingResponse":
        return await self._unary_unary(
            "/chain4energy.c4echain.cfevesting.Msg/MoveAvailableVesting",
            msg_move_available_vesting,
            MsgMoveAvailableVestingResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def move_available_vesting_by_denoms(
        self,
        msg_move_available_vesting_by_denoms: "MsgMoveAvailableVestingByDenoms",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgMoveAvailableVestingByDenomsResponse":
        return await self._unary_unary(
            "/chain4energy.c4echain.cfevesting.Msg/MoveAvailableVestingByDenoms",
            msg_move_available_vesting_by_denoms,
            MsgMoveAvailableVestingByDenomsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_denom_param(
        self,
        msg_update_denom_param: "MsgUpdateDenomParam",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgUpdateDenomParamResponse":
        return await self._unary_unary(
            "/chain4energy.c4echain.cfevesting.Msg/UpdateDenomParam",
            msg_update_denom_param,
            MsgUpdateDenomParamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryBase(ServiceBase):
    async def params(
        self, query_params_request: "QueryParamsRequest"
    ) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def vesting_type(
        self, query_vesting_type_request: "QueryVestingTypeRequest"
    ) -> "QueryVestingTypeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def vesting_pools(
        self, query_vesting_pools_request: "QueryVestingPoolsRequest"
    ) -> "QueryVestingPoolsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def vestings_summary(
        self, query_vestings_summary_request: "QueryVestingsSummaryRequest"
    ) -> "QueryVestingsSummaryResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def genesis_vestings_summary(
        self,
        query_genesis_vestings_summary_request: "QueryGenesisVestingsSummaryRequest",
    ) -> "QueryGenesisVestingsSummaryResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_params(
        self, stream: "grpclib.server.Stream[QueryParamsRequest, QueryParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.params(request)
        await stream.send_message(response)

    async def __rpc_vesting_type(
        self,
        stream: "grpclib.server.Stream[QueryVestingTypeRequest, QueryVestingTypeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.vesting_type(request)
        await stream.send_message(response)

    async def __rpc_vesting_pools(
        self,
        stream: "grpclib.server.Stream[QueryVestingPoolsRequest, QueryVestingPoolsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.vesting_pools(request)
        await stream.send_message(response)

    async def __rpc_vestings_summary(
        self,
        stream: "grpclib.server.Stream[QueryVestingsSummaryRequest, QueryVestingsSummaryResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.vestings_summary(request)
        await stream.send_message(response)

    async def __rpc_genesis_vestings_summary(
        self,
        stream: "grpclib.server.Stream[QueryGenesisVestingsSummaryRequest, QueryGenesisVestingsSummaryResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.genesis_vestings_summary(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/chain4energy.c4echain.cfevesting.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
            "/chain4energy.c4echain.cfevesting.Query/VestingType": grpclib.const.Handler(
                self.__rpc_vesting_type,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryVestingTypeRequest,
                QueryVestingTypeResponse,
            ),
            "/chain4energy.c4echain.cfevesting.Query/VestingPools": grpclib.const.Handler(
                self.__rpc_vesting_pools,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryVestingPoolsRequest,
                QueryVestingPoolsResponse,
            ),
            "/chain4energy.c4echain.cfevesting.Query/VestingsSummary": grpclib.const.Handler(
                self.__rpc_vestings_summary,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryVestingsSummaryRequest,
                QueryVestingsSummaryResponse,
            ),
            "/chain4energy.c4echain.cfevesting.Query/GenesisVestingsSummary": grpclib.const.Handler(
                self.__rpc_genesis_vestings_summary,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGenesisVestingsSummaryRequest,
                QueryGenesisVestingsSummaryResponse,
            ),
        }


class MsgBase(ServiceBase):
    async def create_vesting_pool(
        self, msg_create_vesting_pool: "MsgCreateVestingPool"
    ) -> "MsgCreateVestingPoolResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def withdraw_all_available(
        self, msg_withdraw_all_available: "MsgWithdrawAllAvailable"
    ) -> "MsgWithdrawAllAvailableResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_vesting_account(
        self, msg_create_vesting_account: "MsgCreateVestingAccount"
    ) -> "MsgCreateVestingAccountResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def send_to_vesting_account(
        self, msg_send_to_vesting_account: "MsgSendToVestingAccount"
    ) -> "MsgSendToVestingAccountResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def split_vesting(
        self, msg_split_vesting: "MsgSplitVesting"
    ) -> "MsgSplitVestingResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def move_available_vesting(
        self, msg_move_available_vesting: "MsgMoveAvailableVesting"
    ) -> "MsgMoveAvailableVestingResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def move_available_vesting_by_denoms(
        self, msg_move_available_vesting_by_denoms: "MsgMoveAvailableVestingByDenoms"
    ) -> "MsgMoveAvailableVestingByDenomsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_denom_param(
        self, msg_update_denom_param: "MsgUpdateDenomParam"
    ) -> "MsgUpdateDenomParamResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_vesting_pool(
        self,
        stream: "grpclib.server.Stream[MsgCreateVestingPool, MsgCreateVestingPoolResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_vesting_pool(request)
        await stream.send_message(response)

    async def __rpc_withdraw_all_available(
        self,
        stream: "grpclib.server.Stream[MsgWithdrawAllAvailable, MsgWithdrawAllAvailableResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.withdraw_all_available(request)
        await stream.send_message(response)

    async def __rpc_create_vesting_account(
        self,
        stream: "grpclib.server.Stream[MsgCreateVestingAccount, MsgCreateVestingAccountResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_vesting_account(request)
        await stream.send_message(response)

    async def __rpc_send_to_vesting_account(
        self,
        stream: "grpclib.server.Stream[MsgSendToVestingAccount, MsgSendToVestingAccountResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.send_to_vesting_account(request)
        await stream.send_message(response)

    async def __rpc_split_vesting(
        self, stream: "grpclib.server.Stream[MsgSplitVesting, MsgSplitVestingResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.split_vesting(request)
        await stream.send_message(response)

    async def __rpc_move_available_vesting(
        self,
        stream: "grpclib.server.Stream[MsgMoveAvailableVesting, MsgMoveAvailableVestingResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.move_available_vesting(request)
        await stream.send_message(response)

    async def __rpc_move_available_vesting_by_denoms(
        self,
        stream: "grpclib.server.Stream[MsgMoveAvailableVestingByDenoms, MsgMoveAvailableVestingByDenomsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.move_available_vesting_by_denoms(request)
        await stream.send_message(response)

    async def __rpc_update_denom_param(
        self,
        stream: "grpclib.server.Stream[MsgUpdateDenomParam, MsgUpdateDenomParamResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_denom_param(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/chain4energy.c4echain.cfevesting.Msg/CreateVestingPool": grpclib.const.Handler(
                self.__rpc_create_vesting_pool,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCreateVestingPool,
                MsgCreateVestingPoolResponse,
            ),
            "/chain4energy.c4echain.cfevesting.Msg/WithdrawAllAvailable": grpclib.const.Handler(
                self.__rpc_withdraw_all_available,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgWithdrawAllAvailable,
                MsgWithdrawAllAvailableResponse,
            ),
            "/chain4energy.c4echain.cfevesting.Msg/CreateVestingAccount": grpclib.const.Handler(
                self.__rpc_create_vesting_account,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCreateVestingAccount,
                MsgCreateVestingAccountResponse,
            ),
            "/chain4energy.c4echain.cfevesting.Msg/SendToVestingAccount": grpclib.const.Handler(
                self.__rpc_send_to_vesting_account,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgSendToVestingAccount,
                MsgSendToVestingAccountResponse,
            ),
            "/chain4energy.c4echain.cfevesting.Msg/SplitVesting": grpclib.const.Handler(
                self.__rpc_split_vesting,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgSplitVesting,
                MsgSplitVestingResponse,
            ),
            "/chain4energy.c4echain.cfevesting.Msg/MoveAvailableVesting": grpclib.const.Handler(
                self.__rpc_move_available_vesting,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgMoveAvailableVesting,
                MsgMoveAvailableVestingResponse,
            ),
            "/chain4energy.c4echain.cfevesting.Msg/MoveAvailableVestingByDenoms": grpclib.const.Handler(
                self.__rpc_move_available_vesting_by_denoms,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgMoveAvailableVestingByDenoms,
                MsgMoveAvailableVestingByDenomsResponse,
            ),
            "/chain4energy.c4echain.cfevesting.Msg/UpdateDenomParam": grpclib.const.Handler(
                self.__rpc_update_denom_param,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgUpdateDenomParam,
                MsgUpdateDenomParamResponse,
            ),
        }
