# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: c4echain/cfedistributor/events.proto, c4echain/cfedistributor/genesis.proto, c4echain/cfedistributor/params.proto, c4echain/cfedistributor/query.proto, c4echain/cfedistributor/sub_distributor.proto, c4echain/cfedistributor/tx.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ....cosmos.base import v1beta1 as ___cosmos_base_v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class State(betterproto.Message):
    account: "Account" = betterproto.message_field(1)
    burn: bool = betterproto.bool_field(2)
    remains: List["___cosmos_base_v1_beta1__.DecCoin"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class SubDistributor(betterproto.Message):
    name: str = betterproto.string_field(1)
    sources: List["Account"] = betterproto.message_field(2)
    destinations: "Destinations" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class Destinations(betterproto.Message):
    primary_share: "Account" = betterproto.message_field(1)
    burn_share: str = betterproto.string_field(2)
    shares: List["DestinationShare"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class DestinationShare(betterproto.Message):
    name: str = betterproto.string_field(1)
    share: str = betterproto.string_field(2)
    destination: "Account" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class Account(betterproto.Message):
    id: str = betterproto.string_field(1)
    type: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class Distribution(betterproto.Message):
    subdistributor: str = betterproto.string_field(1)
    share_name: str = betterproto.string_field(2)
    sources: List["Account"] = betterproto.message_field(3)
    destination: "Account" = betterproto.message_field(4)
    amount: List["___cosmos_base_v1_beta1__.DecCoin"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class DistributionBurn(betterproto.Message):
    subdistributor: str = betterproto.string_field(1)
    sources: List["Account"] = betterproto.message_field(2)
    amount: List["___cosmos_base_v1_beta1__.DecCoin"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the parameters for the module."""

    sub_distributors: List["SubDistributor"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """GenesisState defines the cfedistributor module's genesis state."""

    params: "Params" = betterproto.message_field(1)
    states: List["State"] = betterproto.message_field(2)
    """this line is used by starport scaffolding # genesis/proto/state"""


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    """QueryParamsRequest is request type for the Query/Params RPC method."""

    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is response type for the Query/Params RPC method.
    """

    params: "Params" = betterproto.message_field(1)
    """params holds all the parameters of this module."""


@dataclass(eq=False, repr=False)
class QueryStatesRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryStatesResponse(betterproto.Message):
    states: List["State"] = betterproto.message_field(1)
    coins_on_distributor_account: List[
        "___cosmos_base_v1_beta1__.Coin"
    ] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MsgUpdateParams(betterproto.Message):
    authority: str = betterproto.string_field(1)
    """authority is the address of the governance account."""

    sub_distributors: List["SubDistributor"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MsgUpdateParamsResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgUpdateSubDistributorParam(betterproto.Message):
    authority: str = betterproto.string_field(1)
    """authority is the address of the governance account."""

    sub_distributor: "SubDistributor" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MsgUpdateSubDistributorParamResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgUpdateSubDistributorDestinationShareParam(betterproto.Message):
    authority: str = betterproto.string_field(1)
    sub_distributor_name: str = betterproto.string_field(2)
    destination_name: str = betterproto.string_field(3)
    share: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class MsgUpdateSubDistributorDestinationShareParamResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgUpdateSubDistributorBurnShareParam(betterproto.Message):
    authority: str = betterproto.string_field(1)
    sub_distributor_name: str = betterproto.string_field(2)
    burn_share: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class MsgUpdateSubDistributorBurnShareParamResponse(betterproto.Message):
    pass


class QueryStub(betterproto.ServiceStub):
    async def params(
        self,
        query_params_request: "QueryParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryParamsResponse":
        return await self._unary_unary(
            "/chain4energy.c4echain.cfedistributor.Query/Params",
            query_params_request,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def states(
        self,
        query_states_request: "QueryStatesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryStatesResponse":
        return await self._unary_unary(
            "/chain4energy.c4echain.cfedistributor.Query/States",
            query_states_request,
            QueryStatesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgStub(betterproto.ServiceStub):
    async def update_params(
        self,
        msg_update_params: "MsgUpdateParams",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgUpdateParamsResponse":
        return await self._unary_unary(
            "/chain4energy.c4echain.cfedistributor.Msg/UpdateParams",
            msg_update_params,
            MsgUpdateParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_sub_distributor_param(
        self,
        msg_update_sub_distributor_param: "MsgUpdateSubDistributorParam",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgUpdateSubDistributorParamResponse":
        return await self._unary_unary(
            "/chain4energy.c4echain.cfedistributor.Msg/UpdateSubDistributorParam",
            msg_update_sub_distributor_param,
            MsgUpdateSubDistributorParamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_sub_distributor_destination_share_param(
        self,
        msg_update_sub_distributor_destination_share_param: "MsgUpdateSubDistributorDestinationShareParam",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgUpdateSubDistributorDestinationShareParamResponse":
        return await self._unary_unary(
            "/chain4energy.c4echain.cfedistributor.Msg/UpdateSubDistributorDestinationShareParam",
            msg_update_sub_distributor_destination_share_param,
            MsgUpdateSubDistributorDestinationShareParamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_sub_distributor_burn_share_param(
        self,
        msg_update_sub_distributor_burn_share_param: "MsgUpdateSubDistributorBurnShareParam",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgUpdateSubDistributorBurnShareParamResponse":
        return await self._unary_unary(
            "/chain4energy.c4echain.cfedistributor.Msg/UpdateSubDistributorBurnShareParam",
            msg_update_sub_distributor_burn_share_param,
            MsgUpdateSubDistributorBurnShareParamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryBase(ServiceBase):
    async def params(
        self, query_params_request: "QueryParamsRequest"
    ) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def states(
        self, query_states_request: "QueryStatesRequest"
    ) -> "QueryStatesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_params(
        self, stream: "grpclib.server.Stream[QueryParamsRequest, QueryParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.params(request)
        await stream.send_message(response)

    async def __rpc_states(
        self, stream: "grpclib.server.Stream[QueryStatesRequest, QueryStatesResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.states(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/chain4energy.c4echain.cfedistributor.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
            "/chain4energy.c4echain.cfedistributor.Query/States": grpclib.const.Handler(
                self.__rpc_states,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryStatesRequest,
                QueryStatesResponse,
            ),
        }


class MsgBase(ServiceBase):
    async def update_params(
        self, msg_update_params: "MsgUpdateParams"
    ) -> "MsgUpdateParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_sub_distributor_param(
        self, msg_update_sub_distributor_param: "MsgUpdateSubDistributorParam"
    ) -> "MsgUpdateSubDistributorParamResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_sub_distributor_destination_share_param(
        self,
        msg_update_sub_distributor_destination_share_param: "MsgUpdateSubDistributorDestinationShareParam",
    ) -> "MsgUpdateSubDistributorDestinationShareParamResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_sub_distributor_burn_share_param(
        self,
        msg_update_sub_distributor_burn_share_param: "MsgUpdateSubDistributorBurnShareParam",
    ) -> "MsgUpdateSubDistributorBurnShareParamResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_update_params(
        self, stream: "grpclib.server.Stream[MsgUpdateParams, MsgUpdateParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_params(request)
        await stream.send_message(response)

    async def __rpc_update_sub_distributor_param(
        self,
        stream: "grpclib.server.Stream[MsgUpdateSubDistributorParam, MsgUpdateSubDistributorParamResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_sub_distributor_param(request)
        await stream.send_message(response)

    async def __rpc_update_sub_distributor_destination_share_param(
        self,
        stream: "grpclib.server.Stream[MsgUpdateSubDistributorDestinationShareParam, MsgUpdateSubDistributorDestinationShareParamResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_sub_distributor_destination_share_param(request)
        await stream.send_message(response)

    async def __rpc_update_sub_distributor_burn_share_param(
        self,
        stream: "grpclib.server.Stream[MsgUpdateSubDistributorBurnShareParam, MsgUpdateSubDistributorBurnShareParamResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_sub_distributor_burn_share_param(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/chain4energy.c4echain.cfedistributor.Msg/UpdateParams": grpclib.const.Handler(
                self.__rpc_update_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgUpdateParams,
                MsgUpdateParamsResponse,
            ),
            "/chain4energy.c4echain.cfedistributor.Msg/UpdateSubDistributorParam": grpclib.const.Handler(
                self.__rpc_update_sub_distributor_param,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgUpdateSubDistributorParam,
                MsgUpdateSubDistributorParamResponse,
            ),
            "/chain4energy.c4echain.cfedistributor.Msg/UpdateSubDistributorDestinationShareParam": grpclib.const.Handler(
                self.__rpc_update_sub_distributor_destination_share_param,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgUpdateSubDistributorDestinationShareParam,
                MsgUpdateSubDistributorDestinationShareParamResponse,
            ),
            "/chain4energy.c4echain.cfedistributor.Msg/UpdateSubDistributorBurnShareParam": grpclib.const.Handler(
                self.__rpc_update_sub_distributor_burn_share_param,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgUpdateSubDistributorBurnShareParam,
                MsgUpdateSubDistributorBurnShareParamResponse,
            ),
        }
